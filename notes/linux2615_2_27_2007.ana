
Race Warning id: 16266


1  	[REP: 3713].unplug_timer.entry.prev  	168 in kernel/timer.c  	[]  	____call_usermodehelper (435766) -> ...
2 	[REP: 3713].unplug_timer.entry.prev 	171 in kernel/timer.c 		jffs2_garbage_collect_thread (392238) -> ...
2 		                                    152 in include/linux/list.h 	

FIRST AND SECOND:


static inline void detach_timer(struct timer_list *timer,
					int clear_pending)
{
	struct list_head *entry = &timer->entry;

	__list_del(entry->prev, entry->next);           //HERE
	if (clear_pending)
		entry->next = NULL;
	entry->prev = LIST_POISON2;                     //HERE
}

no idea... (call graph too large)

Hmm... these rep-node IDs are all wrong... they are all constants?!

---

Race Warning id: 16277

1  	[REP: 1949].prev_mm  	1679 in kernel/sched.c  	[]  	____call_usermodehelper (435766) -> ...
2 	[REP: 1949].prev_mm 	1678 in kernel/sched.c 		jffs2_garbage_collect_thread (392238) -> ...


FIRST AND SECOND:

static inline
task_t * context_switch(runqueue_t *rq, task_t *prev, task_t *next)
{
	struct mm_struct *mm = next->mm;
	struct mm_struct *oldmm = prev->active_mm;

	if (unlikely(!mm)) {
		next->active_mm = oldmm;
		atomic_inc(&oldmm->mm_count);
		enter_lazy_tlb(oldmm, next);
	} else
		switch_mm(oldmm, mm, next);

	if (unlikely(!prev->mm)) {
		prev->active_mm = NULL;
		WARN_ON(rq->prev_mm);       //SECOND
		rq->prev_mm = oldmm;        //FIRST
	}

	/* Here we just switch the register state and the stack. */
	switch_to(prev, next, prev);

	return prev;
}

called by schedule(void) w/ spin_lock_irq(rq = this_rq())

REASON: lost lock (runqueue lock problem?)

---

Race Warning id: 16279

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 863] 	425 in include/asm/string.h 	[] 	bnep_session (77356) -> ...
2 	[REP: 863] 	186 in net/bluetooth/hidp/core.c 		hidp_session (76425) -> ...
2 		190 in net/bluetooth/hidp/core.c 		
2 		193 in net/bluetooth/hidp/core.c 		
2 		197 in net/bluetooth/hidp/core.c 		

other string.h accesses

Acc#	Lval	Occurs at	Locks held 	Access path
1 	[REP: 863] 	368 in net/bluetooth/bnep/core.c 	[] 	bnep_session (77356) -> ...
2 	[REP: 863] 	186 in net/bluetooth/hidp/core.c 		hidp_session (76425) -> ...
2 		190 in net/bluetooth/hidp/core.c 		
2 		193 in net/bluetooth/hidp/core.c 		
2 		197 in net/bluetooth/hidp/core.c 		

Acc#	Lval	Occurs at	Locks held 	Access path
1 	[REP: 863] 	378 in net/bluetooth/bnep/core.c 	[] 	bnep_session (77356) -> ...
2 	[REP: 863] 	186 in net/bluetooth/hidp/core.c 		hidp_session (76425) -> ...
2 		190 in net/bluetooth/hidp/core.c 		
2 		193 in net/bluetooth/hidp/core.c 		
2 		197 in net/bluetooth/hidp/core.c 		


hidp/core.c 186, 190: accessed keys[i]
            193, 197: accessed udata[i] in 
    hidp_input_report (no locks) <-
        ...
    keys and udata are based on "session", which is created outside the thread each time the thread is created
        

string.h 425: accessed *(arg0) in
    __constant_c_and_count_memset (no locks) <-


bnep/core.c 368, 378: put_unaligned(s->eh.h_proto, (u16 *) __skb_put(nskb, 2))
    bnep_rx_frame (no locks) <-
    keys and udata are based on "session", which is created outside the thread each time the thread is created


REASON: init fresh memory (created before fork)


---

Race Warning id: 16282

1  	old_offset  	450 in drivers/char/vt.c  	[]  	____call_usermodehelper (435766) -> ...
2 	old_offset (283313) 	450 in drivers/char/vt.c 		jffs2_garbage_collect_thread (392238) -> ...



/* used by selection: complement pointer position */
void complement_pos(struct vc_data *vc, int offset)
{
	static int old_offset = -1;
	static unsigned short old;
	static unsigned short oldx, oldy;

	WARN_CONSOLE_UNLOCKED();

	old_offset = offset;                // HERE

    //...
}

REASON: race (expected in vt.c)


---

Race Warning id: 16296

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 0].nf_bridge 	432 in net/core/skbuff.c 	[] 	bnep_session (77356) -> ...
2 	[REP: 0].nf_bridge 	432 in net/core/skbuff.c 		bnep_session (77356) -> ... 



struct sk_buff *skb_clone(struct sk_buff *skb, gfp_t gfp_mask)
{
	struct sk_buff *n;

	n = skb + 1;
	if (skb->fclone == SKB_FCLONE_ORIG &&
	    n->fclone == SKB_FCLONE_UNAVAILABLE) {
		atomic_t *fclone_ref = (atomic_t *) (n + 1);
		n->fclone = SKB_FCLONE_CLONE;
		atomic_inc(fclone_ref);
	} else {
		n = kmem_cache_alloc(skbuff_head_cache, gfp_mask);
		if (!n)
			return NULL;
		n->fclone = SKB_FCLONE_UNAVAILABLE;
	}

#define C(x) n->x = skb->x
//...

	C(nf_bridge); // HERE

//...
}

hmm... also great^i-grandparent is netpoll_rx:

 56         spin_lock_irqsave(&npinfo->rx_lock, flags);
 57         /* check rx_flags again with the lock held */
 58         if (npinfo->rx_flags && __netpoll_rx(skb))          //DESCEND
 59                 ret = 1;
 60         spin_unlock_irqrestore(&npinfo->rx_lock, flags);

great^j-great^i-grandparent is bnep_rx_frame:

349   /* We have to alloc new skb and copy data here :(. Because original skb
350    * may not be modified and because of the alignment requirements. */
351    nskb = alloc_skb(2 + ETH_HLEN + skb->len, GFP_KERNEL);

386    nskb->dev       = dev;
387    nskb->ip_summed = CHECKSUM_NONE;
388    nskb->protocol  = eth_type_trans(nskb, dev);
389    netif_rx_ni(nskb);



REASON: init fresh memory (along one branch)

---

Race Warning id: 16309

Acc#	Lval	Occurs at	Locks held 	Access path
1 	((irda_rq_queue.request_list.next)->data)->fsm.result 	266 in drivers/net/irda/sir_kthread.c 	[] 	irda_thread (204364) -> ...
2 	((irda_rq_queue.request_list.next)->data)->fsm.result (204341) 	266 in drivers/net/irda/sir_kthread.c 		irda_thread (204364) -> ...
2 		275 in drivers/net/irda/sir_kthread.c 		
2 		297 in drivers/net/irda/sir_kthread.c 		
2 		304 in drivers/net/irda/sir_kthread.c 		
2 		326 in drivers/net/irda/sir_kthread.c 		
2 		347 in drivers/net/irda/sir_kthread.c 		
2 		367 in drivers/net/irda/sir_kthread.c 		
2 		394 in drivers/net/irda/sir_kthread.c 		

//access 1 and 2 share the same pps

sir_kthread.c 266, 275, 297, 304, 326, 347, 367, 394:

static void irda_config_fsm(void *data)
{
	struct sir_dev *dev = data;
	struct sir_fsm *fsm = &dev->fsm;
    
    //...
					fsm->result = -EINVAL;
    //...
				fsm->result = ret;
    //...
				fsm->result = -EINVAL;
    //... all in the same function
}

set as a function pointer:

456         fsm->rq.func = irda_config_fsm;
457         fsm->rq.data = dev;


called by:

static void run_irda_queue(void)
{
    unsigned long flags;
    struct list_head *entry, *tmp;
    struct irda_request *rq;

    spin_lock_irqsave(&irda_rq_queue.lock, flags);
    list_for_each_safe(entry, tmp, &irda_rq_queue.request_list) {
        rq = list_entry(entry, struct irda_request, lh_request);
        list_del_init(entry);                                       //REMOVED
        spin_unlock_irqrestore(&irda_rq_queue.lock, flags);

        clear_bit(0, &rq->pending);
        rq->func(rq->data);                                         //CALLS

        if (atomic_dec_and_test(&irda_rq_queue.num_pending))
            wake_up(&irda_rq_queue.done);
        spin_lock_irqsave(&irda_rq_queue.lock, flags);
    }
    spin_unlock_irqrestore(&irda_rq_queue.lock, flags);
}

lock is not taken when calling through funptr, but obj is removed from list

also, fsm->sem is down'ed by another function


REASON: unique / join-like sync? semaphore taken by other function

---

Race Warning id: 16311

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 3713].b_frozen_data 	752 in fs/jbd/commit.c 	[] 	kjournald (395072) -> ...
2 	[REP: 3713].b_frozen_data 	750 in fs/jbd/commit.c 		kjournald (395072) -> ...
2 		751 in fs/jbd/commit.c 		
2 		754 in fs/jbd/commit.c 		
2 		755 in fs/jbd/commit.c 		
2 		304 in fs/jbd/journal.c 		
2 		306 in fs/jbd/journal.c 		
2 		307 in fs/jbd/journal.c 		
2 		333 in fs/jbd/journal.c 		
2 		1956 in fs/jbd/transaction.c 		
1 	[REP: 3713].b_frozen_data 	756 in fs/jbd/commit.c 	[] 	kjournald (395072) -> ...
1 	[REP: 3713].b_frozen_data 	338 in fs/jbd/journal.c 	[] 	kjournald (395072) -> ...


commit.c 750, 751, 752, 755 756 :

void journal_commit_transaction(journal_t *journal)
{

    //....

restart_loop:
	/*
	 * As there are other places (journal_unmap_buffer()) adding buffers
	 * to this list we have to be careful and hold the j_list_lock.
	 */
	spin_lock(&journal->j_list_lock);
	while (commit_transaction->t_forget) {
		transaction_t *cp_transaction;
		struct buffer_head *bh;

		jh = commit_transaction->t_forget;
		spin_unlock(&journal->j_list_lock);
		bh = jh2bh(jh);
		jbd_lock_bh_state(bh);                  //LOCK?

		J_ASSERT_JH(jh,	jh->b_transaction == commit_transaction ||
			jh->b_transaction == journal->j_running_transaction);

				jh->b_frozen_data = NULL;

                //...
                jh->b_frozen_data = NULL;
            }
            
		spin_lock(&journal->j_list_lock);
        //...

}

static inline void jbd_lock_bh_state(struct buffer_head *bh)
{
    bit_spin_lock(BH_State, &bh->b_state);
}

static inline void bit_spin_lock(int bitnum, unsigned long *addr)
{
    //...
}


REASON: didn't model bit_spin_lock (optimistically model as one lock?)

---

Race Warning id: 16321

Acc#	Lval	Occurs at	Locks held  	Access path
1 	log_level_unknown 	598 in kernel/printk.c 	[] 	____call_usermodehelper (435766) -> ...
1 	log_level_unknown 	604 in kernel/printk.c 	[] 	____call_usermodehelper (435766) -> ...
2 	log_level_unknown (439715) 	555 in kernel/printk.c 		jffs2_garbage_collect_thread (392238) -> ...


printk.c 555, 598, 604 in vprintk

	preempt_disable();
	if (unlikely(oops_in_progress) && printk_cpu == smp_processor_id())
		/* If a crash is occurring during printk() on this CPU,
		 * make sure we can't deadlock */
		zap_locks();

	/* This stops the holder of console_sem just where we want him */
	spin_lock_irqsave(&logbuf_lock, flags);
	printk_cpu = smp_processor_id();

	/* Emit the output into the temporary buffer */
	printed_len = vscnprintf(printk_buf, sizeof(printk_buf), fmt, args);

	/*
	 * Copy the output into log_buf.  If the caller didn't provide
	 * appropriate log level tags, we insert them here
	 */
	for (p = printk_buf; *p; p++) {
		if (log_level_unknown) {        // 555 HERE

        //...
    		log_level_unknown = 0;  // 598

        //...
			log_level_unknown = 1;  // 604

should have the logbuf_lock

REASON: lost lock (re-entrant use of logbuf_lock)

---

Race Warning id: 16322

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 3713].offset 	1288 in net/rxrpc/call.c 	[] 	rxrpc_krxiod (20348) -> ...
2 	[REP: 3713].offset 	1288 in net/rxrpc/call.c 		rxrpc_krxiod (20348) -> ...
2 		1515 in net/rxrpc/call.c 		
2 		1532 in net/rxrpc/call.c 		

1 	[REP: 3713].offset 	1515 in net/rxrpc/call.c 	[] 	rxrpc_krxiod (20348) -> ...
1 	[REP: 3713].offset 	1532 in net/rxrpc/call.c 	[] 	rxrpc_krxiod (20348) -> ...
1 	[REP: 3713].offset 	1288 in net/rxrpc/call.c 	[] 	rxrpc_krxiod (20348) -> ...
1 	[REP: 3713].offset 	1515 in net/rxrpc/call.c 	[] 	rxrpc_krxiod (20348) -> ...
1 	[REP: 3713].offset 	1532 in net/rxrpc/call.c 	[] 	rxrpc_krxiod (20348) -> ...


994 (r) in rxrpc_call_receive_ack_packet (w/out call->lock)
    <- see below for parents

call.c 1283 (r), 1288 	msg->offset += sizeof(_ack) in
    rxrpc_call_receive_ack_packet (no lock) <-
        rxrpc_call_receive_packet(struct rxrpc_call *call) 
            extracts parent from a list

call.c 1515, 1527, 1532  msg->offset += delta in
    rxrpc_call_record_ACK (no lock) <-
        rxrpc_call_receive_ack_packet (see above)
        

REASON: unique/removed from list

---

Race Warning id: 16323

Acc#	Lval	Occurs at	Locks held  	Access path
1 	(vc_cons[0].d)->vc_origin 	649 in drivers/char/vt.c 	[] 	kthread (434499) -> ...
2 	(vc_cons[0].d)->vc_origin (129927) 	572 in drivers/char/vt.c 		reclaimer (391223) -> ...
1 	(vc_cons[0].d)->vc_origin 	290 in drivers/char/vt.c 	[] 	kthread (434499) -> ...
1 	(vc_cons[0].d)->vc_origin 	573 in drivers/char/vt.c 	[] 	kthread (434499) -> ...
1 	(vc_cons[0].d)->vc_origin 	574 in drivers/char/vt.c 	[] 	kthread (434499) -> ...
1 	(vc_cons[0].d)->vc_origin 	575 in drivers/char/vt.c 	[] 	kthread (434499) -> ...
1 	(vc_cons[0].d)->vc_origin 	592 in drivers/char/vt.c 	[] 	kthread (434499) -> ...


vt.c 290 reads vc->vc_origin in
    do_update_region (no lock) <-
        
vt.c 573, 574, 575 r/w vg->vc_origin in
    static void set_origin(struct vc_data *vc) WARN_CONSOLE_UNLOCKED();


REASON: race from old batch (expected in vt.c)

---

Race Warning id: 16324

Acc#	Lval	Occurs at	Locks held  	Access path
1 	swap_info[0].lowest_bit 	259 in mm/swapfile.c 	[] 	____call_usermodehelper (435766) -> ...
2 	swap_info[0].lowest_bit (424157) 	259 in mm/swapfile.c 		jffs2_garbage_collect_thread (392238) -> ... 


static int swap_entry_free(struct swap_info_struct *p, unsigned long offset)
{
	int count = p->swap_map[offset];

	if (count < SWAP_MAP_MAX) {
		count--;
		p->swap_map[offset] = count;
		if (!count) {
			if (offset < p->lowest_bit)
				p->lowest_bit = offset;     //HERE

    //...
}


swap_entry_free (no locks) <-
    called by swap_free (conditional lock)

275 void swap_free(swp_entry_t entry)
276 {
277         struct swap_info_struct * p;
278 
279         p = swap_info_get(entry);
280         if (p) {
281                 swap_entry_free(p, swp_offset(entry));
282                 spin_unlock(&swap_lock);
283         }
284 }


214 static struct swap_info_struct * swap_info_get(swp_entry_t entry)
215 {
216         struct swap_info_struct * p;
217         unsigned long offset, type;
218 
219         if (!entry.val)
220                 goto out;
221         type = swp_type(entry);
222         if (type >= nr_swapfiles)
223                 goto bad_nofile;
224         p = & swap_info[type];
225         if (!(p->flags & SWP_USED))
226                 goto bad_device;
227         offset = swp_offset(entry);
228         if (offset >= p->max)
229                 goto bad_offset;
230         if (!p->swap_map[offset])
231                 goto bad_free;
232         spin_lock(&swap_lock);
233         return p;
234
//... 
244 bad_nofile:
245         printk(KERN_ERR "swap_free: %s%08lx\n", Bad_file, entry.val);
246 out:
247         return NULL;
}

so if p == NULL, it doesn't have the lock

REASON: conditional lock (depends on return value)

---

Race Warning id: 16135

Acc#	Lval	Occurs at	Locks held 	Access path
1 	[REP: 3713].anon_vma 	539 in mm/mmap.c 	[] 	fork_sync_thread (59077) -> ...
2 	[REP: 3713].anon_vma 	106 in mm/rmap.c 		rxrpc_krxsecd (20253) -> ...
2 		539 in mm/mmap.c 	


mmap.c 539 in vma_adjust (vma, ...)

		spin_lock(&anon_vma->lock);
		/*
		 * Easily overlooked: when mprotect shifts the boundary,
		 * make sure the expanding vma has anon_vma set if the
		 * shrinking vma had, to cover any anon pages imported.
		 */
		if (importer && !importer->anon_vma) {
			importer->anon_vma = anon_vma;                      //HERE
			__anon_vma_link(importer);
		}


rmap.c 106 in anon_vma_prepare(struct vm_area_struct *vma)

{
	struct anon_vma *anon_vma = vma->anon_vma;

	might_sleep();
	if (unlikely(!anon_vma)) {
		struct mm_struct *mm = vma->vm_mm;
		struct anon_vma *allocated, *locked;

		anon_vma = find_mergeable_anon_vma(vma);
		if (anon_vma) {
			allocated = NULL;
			locked = anon_vma;
			spin_lock(&locked->lock);                   //COND LOCK
		} else {
			anon_vma = anon_vma_alloc();
			if (unlikely(!anon_vma))
				return -ENOMEM;
			allocated = anon_vma;
			locked = NULL;
		}

		/* page_table_lock to protect against threads */
		spin_lock(&mm->page_table_lock);
		if (likely(!vma->anon_vma)) {
			vma->anon_vma = anon_vma;                           //HERE
			list_add(&vma->anon_vma_node, &anon_vma->head);
			allocated = NULL;
		}
		spin_unlock(&mm->page_table_lock);

		if (locked)
			spin_unlock(&locked->lock);
		if (unlikely(allocated))                //ONLY possible if race?!
			anon_vma_free(allocated);
	}
	return 0;
}

hmm, so it's overwriting a NULL at the memory vma->anon_vma w/ 
something not NON-NULL... it's expecting a race at vma->anon_vma though
(see the likely/unlikely checks!)


if importer == vma, then the locks should be the same...

funny that the page_table_lock doesn't show up though:

Inspecting LS: state before instr
#line 104
_spin_lock(& mm->page_table_lock);
L+ = empty;
L- = {log_wait.lock#tbd, console_sem#tbd, logbuf_lock#tbd, } (3)
Inspecting LS: state after instr
L+ = empty;
L- = {log_wait.lock#tbd, console_sem#tbd, logbuf_lock#tbd, } (3)

Cell :: lval = mm ; isSum = false
Value :: Extptr (2): 
        Cell :: lval = (*(vma->vm_mm)) ; isSum = false

Cell :: lval = (*vma) ; isSum = false
Value :: Struct: 
        .anon_vma=
        Value :: Extptr (1): 
            Cell :: lval = (*(vma->anon_vma)) ; isSum = false
        .vm_mm=
        Value :: Extptr (2): 
            Cell :: lval = (*(vma->vm_mm)) ; isSum = false

no entry for (*(vma->vm_mm)).page_table_lock though

REASON: RACE (but double-checked?)


---

Race Warning id: 16142

Acc#	Lval	Occurs at	Locks held 	Access path
1 	input_timer_state.last_delta2 	606 in drivers/char/random.c 	[] 	hidp_session (76425) -> ...
2 	input_timer_state.last_delta2 (286108) 	606 in drivers/char/random.c 		hidp_session (76425) -> ...



/*
 * This function adds entropy to the entropy "pool" by using timing
 * delays.  It uses the timer_rand_state structure to make an estimate
 * of how many bits of entropy this call has added to the pool.
 *
 * The number "num" is also added to the pool - it should somehow describe
 * the type of event which just happened.  This is currently 0-255 for
 * keyboard scan codes, and 256 upwards for interrupts.
 *
 */
static void add_timer_randomness(struct timer_rand_state *state, unsigned num)
{

    //...

	preempt_disable();

    //...
		delta3 = delta2 - state->last_delta2;
		state->last_delta2 = delta2;

    //...
out:
	preempt_enable();
}

REASON: race -- duplicate (uses preempt_disable(), but state can be shared across procs? modding a randomizer though, so benign?)



---

Race Warning id: 16146


Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 0].end 	658 in net/core/skbuff.c 	[] 	bnep_session (77356) -> ...
2 	[REP: 0].end 	658 in net/core/skbuff.c 		bnep_session (77356) -> ...
2 		451 in net/core/skbuff.c 		

Acc#	Lval	Occurs at	Locks held 	Access path
1 	[REP: 0].end 	451 in net/core/skbuff.c 	[] 	bnep_session (77356) -> ...
2 	[REP: 0].end 	658 in net/core/skbuff.c 		bnep_session (77356) -> ...
2 		451 in net/core/skbuff.c 

REASON: unique -- duplicate (expects reference count of 1)

---

Race Warning id: 16153


Races (grouped by access 1's line number)

Acc#	Lval	Occurs at	Locks held 	Access path
1 	[REP: 3713].idr.layers 	329 in lib/idr.c 	[] 	do_linuxrc (442927) -> ...
2 	[REP: 3713].idr.layers 	337 in lib/idr.c 		jffs2_garbage_collect_thread (392238) -> ...
2 		312 in lib/idr.c 		
1 	[REP: 3713].idr.layers 	330 in lib/idr.c 	[] 	do_linuxrc (442927) -> ...
1 	[REP: 3713].idr.layers 	337 in lib/idr.c 	[] 	do_linuxrc (442927) -> ...


329, 330, 337

void idr_remove(struct idr *idp, int id)
{
	struct idr_layer *p;

	/* Mask off upper bits we don't use for the search. */
	id &= MAX_ID_MASK;

	sub_remove(idp, (idp->layers - 1) * IDR_BITS, id);              //HERE
	if (idp->top && idp->top->count == 1 && (idp->layers > 1) &&    //HERE
	    idp->top->ary[0]) {  // We can drop a layer

		p = idp->top->ary[0];
		idp->top->bitmap = idp->top->count = 0;
		free_layer(idp, idp->top);
		idp->top = p;
		--idp->layers;                                              //HERE
	}
	while (idp->id_free_cnt >= IDR_FREE_MAX) {
		p = alloc_layer(idp);
		kmem_cache_free(idr_layer_cache, p);
		return;
	}
}

312

static void sub_remove(struct idr *idp, int shift, int id)
{
    //...
	if (likely(p != NULL && test_bit(n, &p->bitmap))){
		__clear_bit(n, &p->bitmap);
    
    //...
		if (!*paa)
			idp->layers = 0; //HERE
    //...
}

        made empty at: fs/namespace.c:286
        made empty at: kernel/auditsc.c:770
        made empty at: kernel/auditsc.c:684

sub_remove (no locks) <-       
    idr_remove (no locks) <- lots of callers
        <-... inotify_inode_is_dead (has inode->inotify_sem, dev->sem)
        <-... release_inode_number (has proc_inum_lock)
        <-... release_posix_timer (has idr_lock)

sub_remove's access always happens before the other accesses, and it can set the value to 0, preventing the other accesses from happening (assuming memory is consistent)


REASON: race - depends on memory consistency of read after write ?

---

Race Warning id: 14228

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 0].nh 	395 in net/core/skbuff.c 	[] 	bnep_session (77356) -> ...
2 	[REP: 0].nh 	395 in net/core/skbuff.c 		bnep_session (77356) -> ...


like before...

#define C(x) n->x = skb->x
    //...
	C(nh);
    //...

REASON: init fresh memory (along one branch)


---

Race Warning id: 14223

Acc#	Lval	Occurs at	Locks held 	Access path
1 	[REP: 3713].ifi_change 	1124 in net/core/wireless.c 	[] 	airo_thread (184445) -> ...
2 	[REP: 3713].ifi_change 	1124 in net/core/wireless.c 		airo_thread (184445) -> ...


static inline int rtnetlink_fill_iwinfo(struct sk_buff *	skb,
					struct net_device *	dev,
					int			type,
					char *			event,
					int			event_len)
{
	struct ifinfomsg *r;
	struct nlmsghdr  *nlh;
	unsigned char	 *b = skb->tail;

	nlh = NLMSG_PUT(skb, 0, 0, type, sizeof(*r));
	r = NLMSG_DATA(nlh);
	r->ifi_family = AF_UNSPEC;
    //...
	r->ifi_change = 0;	/* Wireless changes don't affect those flags */ //HERE

    /* Add the wireless events in the netlink packet */
	RTA_PUT(skb, IFLA_WIRELESS,
		event_len, event);

	nlh->nlmsg_len = skb->tail - b;
	return skb->len;
//...
}


rtnetlink_fill_iwinfo (no locks) <-
    rtmsg_iwinfo (init fresh memory)


REASON: init fresh memory

---

Race Warning id: 14216
From program

Linux v.2.6.15
Races (grouped by access 1's line number)

Acc#	Lval	Occurs at	Locks held 	Access path
1 	oops_in_progress 	42 in arch/i386/mm/fault.c 	[] 	____call_usermodehelper (435766) -> ...
1 	oops_in_progress 	48 in arch/i386/mm/fault.c 	[] 	____call_usermodehelper (435766) -> ...
2 	oops_in_progress (1400) 	5658 in kernel/sched.c 		jffs2_garbage_collect_thread (392238) -> ...
2 		538 in kernel/printk.c 		
2 		771 in kernel/printk.c 		
2 		2854 in drivers/char/vt.c 		
2 		2857 in drivers/char/vt.c 		
2 		605 in drivers/char/vt.c 		
2 		441 in drivers/char/vt.c 		
2 		394 in drivers/char/vt.c 		
2 		2947 in drivers/char/vt.c 		
2 		567 in drivers/char/vt.c 		
2 		580 in drivers/char/vt.c 		

in bust_spinlocks (int yes)

42 (set to 1 if yes)
48 (set to 0)

others are reads...

bust_spinlocks <-
     die (holds die_lock)
    __do_kernel_fault (no die lock)
    do_page_fault (no die lock)
    die (holds die.lock)
    die_nmi (holds nmi_print_lock for bust_spinlocks(1), but not for 0)
    ia64_do_page_fault (no die.lock)
    panic (only does preempt_disable)


REASON: race? only during panic


---

Race Warning id: 14215

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 0].rta_len 	128 in net/core/rtnetlink.c 	[] 	airo_thread (184445) -> ...
2 	[REP: 0].rta_len 	128 in net/core/rtnetlink.c 		airo_thread (184445) -> ...


void __rta_fill(struct sk_buff *skb, int attrtype, int attrlen, const void *data)
{
	struct rtattr *rta;
	int size = RTA_LENGTH(attrlen);

	rta = (struct rtattr*)skb_put(skb, RTA_ALIGN(size));
	rta->rta_type = attrtype;
	rta->rta_len = size;                                    //HERE
	memcpy(RTA_DATA(rta), data, attrlen);
	memset(RTA_DATA(rta) + attrlen, 0, RTA_ALIGN(size) - size);
}

used by macro RTA_PUT (in many places, but only one leading to thread root)

__rta_fill
    <- RTA_PUT
        <- rtnetlink_fill_iwinfo (no locks)
            <- rtmsg_iwinfo (init fresh memory)

REASON: init fresh memory

---

Race Warning id: 14214

Acc#	Lval	Occurs at	Locks held  	Access path
1 	(args.clp)->cl_lease_time 	2680 in fs/nfs/nfs4proc.c 	[(args.clp)->cl_lock (380194)] 	reclaimer (380192) -> ...
2 	(args.clp)->cl_lease_time (380194) 	106 in fs/nfs/nfs4renewd.c 	[]  reclaimer (380192) -> ...
2 		2655 in fs/nfs/nfs4proc.c 	[]	


2680: in nfs4_proc_setclientid_confirm
		spin_lock(&clp->cl_lock);
		clp->cl_lease_time = fsinfo.lease_time * HZ;    //HERE
		clp->cl_last_renewal = now;
		spin_unlock(&clp->cl_lock);

2655: in nfs4_proc_setclientid(*clp,...) (no locks) <-
    <- __nfs4_init_client (no locks)
        <- nfs4_init_client (no locks)
            <- nfs4_fill_super (w/ clp->cl_sem)
        <- reclaimer (w/ kernel_sem & clp->cl_sem) 

106: in nfs4_schedule_state_renewal	
    spin_lock(&clp->cl_lock);
	timeout = (2 * clp->cl_lease_time) / 3 + (long)clp->cl_last_renewal

<empty_at> <pp file="fs/nfs/nfs4state.c" line="208" ></pp> </empty_at>


static int __nfs4_init_client(struct nfs4_client *clp)
{
	int status = nfs4_proc_setclientid(clp, NFS4_CALLBACK, nfs_callback_tcpport);
	if (status == 0)
		status = nfs4_proc_setclientid_confirm(clp);
	if (status == 0)
		nfs4_schedule_state_renewal(clp);               //empty here
	return status;
}

looks like clp is unique each time though (called through own function ptr) like this.nfs4_recover_state()

REASON: unique? (called w/ this.recover_state()) otherwise race

---

Race Warning id: 14183

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 1949].timestamp 	3102 in kernel/sched.c 	[] 	____call_usermodehelper (435766) -> ...
1  	[REP: 1949].timestamp  	1861 in kernel/sched.c  	[]  	____call_usermodehelper (435766) -> ...
2 	[REP: 1949].timestamp 	3067 in kernel/sched.c 	[] 	jffs2_garbage_collect_thread (392238) -> ...
2 		3068 in kernel/sched.c 	[] 	
2 		3075 in kernel/sched.c 	[] 	
2 		739 in kernel/sched.c 	[] 	
2 		1861 in kernel/sched.c 	[]


REASON: lost lock -- old warning (asm ptr arith for double_rq_lock)


---

Race Warning id: 14180

Acc#	Lval	Occurs at	Locks held  	Access path
1 	host->h_reclaiming 	245 in fs/lockd/clntlock.c 	[] 	reclaimer (391223) -> ...
2 	host->h_reclaiming 	245 in fs/lockd/clntlock.c 	[] 	reclaimer (391223) -> ... 


static int
reclaimer(void *ptr)
{

	struct nlm_host	  *host = (struct nlm_host *) ptr;
    //...
	lock_kernel();
	lockd_up();      //on some paths calls down(&lockd_start) for signaling
    //...
	host->h_reclaiming = 0;

    //...
	nlm_release_host(host);
	lockd_down();
	unlock_kernel();
	module_put_and_exit(0);
}

REASON: lock_kernel() -- reentrant locking

---

Race Warning id: 16488

Acc#	Lval	Occurs at	Locks held  	Access path
1 	oldx 	447 in drivers/char/vt.c 	[] 	kthread (434499) -> ...
2 	oldx 	461 in drivers/char/vt.c 	[] 	fork_sync_thread (59077) -> ...
1 	oldx 	463 in drivers/char/vt.c 	[] 	kthread (434499) -> ...

447, 461, 463:

void complement_pos(struct vc_data *vc, int offset){

	WARN_CONSOLE_UNLOCKED();

    //...
			vc->vc_sw->con_putc(vc, old, oldy, oldx);

    //...
			oldx = (offset >> 1) % vc->vc_cols;
			oldy = (offset >> 1) / vc->vc_cols;
			vc->vc_sw->con_putc(vc, new, oldy, oldx);
    //...
}


REASON: race (expected in vt.c)

---

Race Warning id: 16479

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 3713].shared.vm_set.list.prev 	223 in include/linux/list.h 	[] 	____call_usermodehelper (435766) -> ...
2 	[REP: 3713].shared.vm_set.list.prev 	223 in include/linux/list.h 	[] 	jffs2_garbage_collect_thread (392238) -> ...
2 		91 in mm/prio_tree.c 	[] 	
1 	[REP: 3713].shared.vm_set.list.prev 	91 in mm/prio_tree.c 	[] 	____call_usermodehelper (435766) -> ...

91:

void vma_prio_tree_add(struct vm_area_struct *vma, struct vm_area_struct *old)
{
    if (!old->shared.vm_set.parent)
    //...
	else if (old->shared.vm_set.head)
    //...
    else {
		INIT_LIST_HEAD(&vma->shared.vm_set.list);   //HERE
        //...
    }
}

called by:
    <- vma_prio_tree_insert
        <- __vma_link_file
            <- vma_adjust (cond.)
        <- vma_adjust   (conditionally vma->vm_file->f_mapping->i_mmap_lock)


223:

static inline void list_del_init(struct list_head *entry)
{
	__list_del(entry->prev, entry->next);
	INIT_LIST_HEAD(entry);                  //HERE
}

called by:
    <- vma_prio_tree_remove (no locks)
        <- vma_adjust   (conditionally vma->vm_file->f_mapping->i_mmap_lock)
        <- __remove_shared_vm_struct ("Requires inode->i_mapping->i_mmap_lock")
            <- vma_adjust (cond.)
            <- unlink_file_vma (w/ vma->vm_file->f_mapping->i_mmap_lock)

in vma_adjust:

500         if (file) {
501                 mapping = file->f_mapping;
502                 if (!(vma->vm_flags & VM_NONLINEAR))
503                         root = &mapping->i_mmap;
504                 spin_lock(&mapping->i_mmap_lock);

544         if (root) {
545                 flush_dcache_mmap_lock(mapping);
546                 vma_prio_tree_remove(vma, root);

559         if (root) {
560                 if (adjust_next)
561                         vma_prio_tree_insert(next, root);
562                 vma_prio_tree_insert(vma, root);


REASON: conditional lock

---

Race Warning id: 15027

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 3713].index 	455 in mm/rmap.c 	[] 	____call_usermodehelper (435766) -> ...
2 	[REP: 3713].index 	455 in mm/rmap.c 	[] 	jffs2_garbage_collect_thread (392238) -> ...
2 		173 in mm/page_alloc.c 	[] 	
1 	[REP: 3713].index 	173 in mm/page_alloc.c 	[] 	____call_usermodehelper (435766) -> ...


455:

/**
 * The caller needs to hold the pte lock.
 */
void page_add_anon_rmap(struct page *page,
	struct vm_area_struct *vma, unsigned long address)
{
	if (atomic_inc_and_test(&page->_mapcount)) {

		page->index = linear_page_index(vma, address);
    
    }
	/* else checking page index and mapping is racy */
}

called by:
    <- do_no_page   (uses pte_offset_map_lock w/ ptr_arith, requires "non-exclusive mmap_sem")
        <- handle_pte_fault (no locks)
            <- __handle_mm_fault (no locks)
               <- get_user_pages
               <- handle_mm_fault
    <- do_swap_page (uses lock_page, pte_offset_map_lock)
    <- do_wp_page   
    <- do_anonymous_page


173: in prep_compound_page (no locks)
    <- buffered_rmqueue (removes from lru list)

ugh... come back to this later...

---

Race Warning id: 15245


1  	[REP: 3713].mapping  	453 in mm/rmap.c  	[]  	____call_usermodehelper (435766) -> ...
1  	[REP: 3713].mapping  	301 in mm/memory.c  	[]  	____call_usermodehelper (435766) -> ...
1  	[REP: 3713].mapping  	146 in mm/page_alloc.c  	[]  	____call_usermodehelper (435766) -> ...
1  	[REP: 3713].mapping  	172 in mm/page_alloc.c  	[]  	____call_usermodehelper (435766) -> ...
1  	[REP: 3713].mapping  	689 in mm/page_alloc.c  	[]  	____call_usermodehelper (435766) -> ...
2 	[REP: 3713].mapping 	2947 in fs/buffer.c 	[] 	jffs2_garbage_collect_thread (392238) -> ...
2 		554 in include/linux/mm.h 	[] 	
2 		1578 in fs/buffer.c 	[] 	
2 		2924 in fs/buffer.c 	[] 	
2 		562 in mm/filemap.c 	[] 	
2 		565 in include/linux/mm.h 	[] 	
2 		129 in mm/page_alloc.c 	[] 	
2 		339 in mm/page_alloc.c 	[] 	
2 		476 in mm/page_alloc.c 	[] 


ugh... looks like a pain...

---

Race Warning id: 18599

Acc#	Lval	Occurs at	Locks held  	Access path
1 	[REP: 3713].port_login_retry_count 	2040 in drivers/scsi/qla2xxx/qla_init.c 	[] 	qla2x00_do_dpc (157773) -> ...
2 	[REP: 3713].port_login_retry_count 	2040 in drivers/scsi/qla2xxx/qla_init.c 	[] 	qla2x00_do_dpc (157773) -> ...

static void
qla2x00_update_fcport(scsi_qla_host_t *ha, fc_port_t *fcport)
{
    //...
	fcport->port_login_retry_count = ha->port_down_retry_count *        //HERE
	    PORT_RETRY_TIME;
    //...
}

called by:
    <- qla2x00_configure_local_loop (no locks, iters through ha->fcports
                                     list w/out removing)
        <- qla2x00_configure_loop (looks prepared to detect races, but in a racy manner?)
            <- qla2x00_loop_resync
                <- qla2x00_do_dpc
            <- qla2x00_restart_isp
                <- qla2x00_abort_isp
                    <- qla2x00_do_dpc
                    <- bigass SCC
    <- qla2x00_fabric_dev_login (no locks)
        <- qla2x00_configure_fabric (defn added to ha->fcports before access)
            <- qla2x00_configure_loop (same as above)
    <- qla2x00_probe_for_all_luns (no locks)
        <- qla2x00_rescan_fcports
    <- qla2x00_rescan_fcports (no locks)
        <- qla2x00_do_dpc 


REASON: can't see why it's not a race right now... maybe custom mutex...

---

Race Warning id: 18735


Acc#	Lval	Occurs at	Locks held  	Access path
1 	c->gc_task 	81 in fs/jffs2/background.c 	[] 	jffs2_garbage_collect_thread (392238) -> ...
1 	c->gc_task 	141 in fs/jffs2/background.c 	[] 	jffs2_garbage_collect_thread (392238) -> ...
2 	c->gc_task 	81 in fs/jffs2/background.c 	[] 	jffs2_garbage_collect_thread (392238) -> ...
2 		141 in fs/jffs2/background.c 	[] 	

81, 141:

static int jffs2_garbage_collect_thread(void *_c)
{
	struct jffs2_sb_info *c = _c;
	c->gc_task = current;               //HERE

 die:
	spin_lock(&c->erase_completion_lock);
	c->gc_task = NULL;                          //HERE
	spin_unlock(&c->erase_completion_lock);
	complete_and_exit(&c->gc_thread_exit, 0);
}

1st
        made empty at: fs/jffs2/background.c:141
2nd
        made empty at: fs/jffs2/background.c:141

hmm... it doesn't show up in DB...


anyway... access 1 happens after jffs2_start_garbage_collect_thread
          access 2 happens after jffs2_stop_garbage_collect_thread

jffs2_start_garbage_collect_thread checks to make sure only one is running

 38         if (c->gc_task)
 39                 BUG();

REASON: only one thread (enforced by flag)

---

Race Warning id: 18770

Acc#	Lval	Occurs at	Locks held 	Access path
1 	[REP: 13824].mc_list 	1185 in net/ipv4/igmp.c 	[ [REP: 13824].mc_list_lock ] 	sync_thread (59060) -> ...
2 	[REP: 13824].mc_list 	123 in net/ipv4/devinet.c 	[] 	sync_thread (59060) -> ...
2 		1148 in net/ipv4/igmp.c 	[] 	
2 		1184 in net/ipv4/igmp.c 	[] 	
2 		1545 in net/ipv4/igmp.c 	[]



123 in in_dev_finish_destroy (checks if not null, else print warning)
    <- in_dev_put
           if (atomic_dec_and_test(&idev->refcnt))
           (i.e., if there's not more references, except this one)


1148, 1185, 1184:

void ip_mc_inc_group(struct in_device *in_dev, u32 addr)
{
1146         ASSERT_RTNL();
    //...
	for (im=in_dev->mc_list; im; im=im->next) {   //HERE on in_dev->* only a 1 time read
		if (im->multiaddr == addr) {
			im->users++;
			ip_mc_add_src(in_dev, &addr, MCAST_EXCLUDE, 0, NULL, 0);
			goto out;
		}
	}

	im = (struct ip_mc_list *)kmalloc(sizeof(*im), GFP_KERNEL); 
	if (!im)
		goto out;
    //...
	write_lock_bh(&in_dev->mc_list_lock);
	im->next=in_dev->mc_list;                           //HERE on in_dev->*
	in_dev->mc_list=im;                                 //HERE
	write_unlock_bh(&in_dev->mc_list_lock);
    //...
out:
	return;
}

lock is def'n not held for 1148 (acquires later for 1184, 1185)... does
have the rtnl_sem (but lost by re-entrant trylock test)

1545: uses read_lock

{rtnl_sem} {rtnl_sem, in_dev->mc_list_lock} {in_dev->mc_list_lock}

REASON: Different locksets (but overlapping) / conditional / unique

---

Race Warning id: 14491

Acc#	Lval	Occurs at	Locks held 	Access path
1 	[REP: 863].proto_filter[0].end 	121 in net/bluetooth/bnep/core.c 	[] 	bnep_session (77356) -> ...
2 	[REP: 863].proto_filter[0].end 	121 in net/bluetooth/bnep/core.c 	[] 	bnep_session (77356) -> ...
2 		124 in net/bluetooth/bnep/core.c 	[] 	
2 		127 in net/bluetooth/bnep/core.c 	[] 	
1 	[REP: 863].proto_filter[0].end 	124 in net/bluetooth/bnep/core.c 	[] 	bnep_session (77356) -> ...
1 	[REP: 863].proto_filter[0].end 	127 in net/bluetooth/bnep/core.c 	[] 	bnep_session (77356) -> ...

121, 124, 127:

static inline void bnep_set_default_proto_filter(struct bnep_session *s)
{
	/* (IPv4, ARP)  */
	s->proto_filter[0].start = htons(0x0800);
	s->proto_filter[0].end   = htons(0x0806);       //HERE
	/* (RARP, AppleTalk) */
	s->proto_filter[1].start = htons(0x8035);
	s->proto_filter[1].end   = htons(0x80F3);       //HERE
	/* (IPX, IPv6) */
	s->proto_filter[2].start = htons(0x8137);
	s->proto_filter[2].end   = htons(0x86DD);       //HERE
}

called by
    <- bnep_ctrl_set_netfilter
        <- bnep_rx_control
            <- bnep_rx_extension
                <- bnep_rx_frame
                    <- bnep_session (thread arg is fresh, but on a list)
    <- bnep_add_connection (on a stack var)


well, the values are only set once to that constant

REASON: unique


---

Race Warning id: 14359

1 	console_locked 	731 in kernel/printk.c 	[] 	kthread (434499) -> ...
2 	console_locked 	619 in kernel/printk.c 	[ console_sem (439638) ] 	fork_sync_thread (59077) -> ...
2 		767 in kernel/printk.c 	[ console_sem (439638) ] 	

731:

int is_console_locked(void)
{
	return console_locked;
}

called by:
    <- complement_pos
    <- invert_screen
    <- set_origin
    <- save_screen
    <- set_palette
    <- do_unblank_screen

used through this macro:

120 /* Some debug stub to catch some of the obvious races in the VT code */
121 #if 1
122 #define WARN_CONSOLE_UNLOCKED() WARN_ON(!is_console_locked() && !oops_in_progress)

REASON: race (benign)

---

Race Warning id: 14358

1 	logged_chars 	449 in kernel/printk.c 	[] 	____call_usermodehelper (435766) -> ...
2 	logged_chars 	449 in kernel/printk.c 	[] 	jffs2_garbage_collect_thread (392238) -> ...


449: in emit_log_char (no locks)
    <- vprintk (w/ logbuf_lock)

but the re-entrant use of logbuf_lock screws it up

REASON: re-entrant lock (logbuf_lock)

---

Race Warning id: 14627

1 	kthread_stop_info.err 	99 in kernel/kthread.c 	[] 	kthread (434499) -> ...
2 	kthread_stop_info.err 	99 in kernel/kthread.c 	[] 	kthread (434499) -> ... 

in kthread:
		kthread_stop_info.err = ret;

not sure if kthread_stop_info is somehow not shared?


---

Race Warning id: 15408

---