Sun Aug 10 21:12:38 PDT 2008
reserved status file: /tmp/temp.y2MGrS
running analysis on /home/jan/research/relay/racetests/thread_tests/ciltrees
Registered summary type: rs
Registered summary type: ss
Registered summary type: rss
Registered summary type: mods
Checking for data races
-----
Loading Cil Varinfo ID ranges for lookup tables
Setting Cil Varinfo ID ranges
Finished parsing config group: ALIAS_ANALYSIS
Finished parsing config group: SUMMARY_DB
Finished parsing config group: REQUEST
Finished parsing config group: DISTRIBUTED
Finished parsing config group: FILE_SERVER
Finished parsing config group: ENTRY_POINTS
Finished parsing config group: LOCK_FUNCS
Finished parsing config group: THREAD_FUNCS
Finished parsing config group: EXIT_FUNCS
Finished parsing config group: SYM_EX
Done reading config file
myIP: 127.0.0.1
using /tmp/relay_scratch to store acquired files
using: /tmp/temp.y2MGrS to track status
Initializing Steensgaard AA info
Loading function info
Using old PTA results
Old PTA results loaded
Reached end of /home/jan/research/relay/racetests/thread_tests/ciltrees/calls.cil call graph file
Num funcs: 36
summary database will use:
	/home/jan/research/relay/racetests/thread_tests/ciltrees/relay_sums
Initializing summary mods
Checking left-over state in mods
Initializing summary rss
Checking left-over state in rss
Initializing summary ss
Checking left-over state in ss
Initializing summary rs
Checking left-over state in rs
SH: initEscapeable found (9, 13) thread (acts, formals)

Entry points use roots: false
file server will use: 14440
trying to clear old summaries / local srcs, etc.
Scc_cg: Pruned 3 funcs w/out bodies for scc DAG
Starting bottomup analysis
-----
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #28
=================================
Summarizing function: _spin_unlock : test_dir/lock.c
-----
doing symstate
TIMES : FUN:3 : 0.000372886657715
TIMES : SCC:28 : 0.000380992889404
=================================
Finished an SCC (1)
=================================
Summary for function: 3
=======

SUMS (fk, lo, un, wr, re):	3	0	1	0	0	

SS Sum:
 -> 
$SSBOT
SIZES: 3 : 136
>>> PROGRESS 1/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #29
=================================
Summarizing function: _spin_lock : test_dir/lock.c
-----
doing symstate
TIMES : SCC:29 : 0.000147819519043
TIMES : FUN:1 : 0.000139951705933
=================================
Finished an SCC (1)
=================================
Summary for function: 1
=======

SUMS (fk, lo, un, wr, re):	1	1	0	0	0	

SS Sum:
 -> 
$SSBOT
SIZES: 1 : 136
>>> PROGRESS 2/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #0
=================================
Summarizing function: lockWithGoto : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	16	0	1	1	2	

TIMES : FUN:16 : 0.00463914871216
TIMES : SCC:0 : 0.00464606285095
=================================
Finished an SCC (1)
=================================
Summary for function: 16
=======

SUMS (fk, lo, un, wr, re):	16	0	1	1	2	

SS Sum:
 -> 
Vval: 0
SIZES: 16 : 308
>>> PROGRESS 3/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #1
=================================
Summarizing function: globMunge : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 1	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	33	0	0	1	1	

TIMES : SCC:1 : 0.00021505355835
TIMES : FUN:33 : 0.000209093093872
=================================
Finished an SCC (1)
=================================
Summary for function: 33
=======

SUMS (fk, lo, un, wr, re):	33	0	0	1	1	

SS Sum:
 -> 
Vval: 0
SIZES: 33 : 195
>>> PROGRESS 4/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #26
=================================
Summarizing function: unlockedOnEntry : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	95	0	1	1	1	

TIMES : SCC:26 : 0.00203585624695
TIMES : FUN:95 : 0.00202918052673
=================================
Finished an SCC (1)
=================================
Summary for function: 95
=======

SUMS (fk, lo, un, wr, re):	95	0	1	1	1	

SS Sum:
 -> 
$SSBOT
SIZES: 95 : 267
>>> PROGRESS 5/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #25
=================================
Summarizing function: lockedOnEntry : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	98	0	0	3	3	

TIMES : SCC:25 : 0.000954866409302
TIMES : FUN:98 : 0.00095009803772
=================================
Finished an SCC (1)
=================================
Summary for function: 98
=======

SUMS (fk, lo, un, wr, re):	98	0	0	3	3	

SS Sum:
 -> 
$SSBOT
SIZES: 98 : 314
>>> PROGRESS 6/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #2
=================================
Summarizing function: safeThread : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 1	misses: 4

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	101	0	1	3	3	

TIMES : SCC:2 : 0.00104212760925
TIMES : FUN:101 : 0.00103688240051
=================================
Finished an SCC (1)
=================================
Summary for function: 101
=======

SUMS (fk, lo, un, wr, re):	101	0	1	3	3	

SS Sum:
 -> 
Vval: 0
SIZES: 101 : 321
>>> PROGRESS 7/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #3
=================================
Summarizing function: modAL2 : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 5	misses: 4

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	117	0	1	1	1	

TIMES : SCC:3 : 0.000663042068481
TIMES : FUN:117 : 0.00065803527832
=================================
Finished an SCC (1)
=================================
Summary for function: 117
=======

SUMS (fk, lo, un, wr, re):	117	0	1	1	1	

SS Sum:
 -> 
$SSBOT
SIZES: 117 : 111
>>> PROGRESS 8/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #4
=================================
Summarizing function: makeAlias : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	31	0	0	1	0	

TIMES : SCC:4 : 0.00373601913452
TIMES : FUN:31 : 0.00372910499573
=================================
Finished an SCC (1)
=================================
Summary for function: 31
=======

SUMS (fk, lo, un, wr, re):	31	0	0	1	0	

SS Sum:
 -> 
$SSBOT
SIZES: 31 : 85
>>> PROGRESS 9/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #5
=================================
Summarizing function: reachedByFP : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	133	0	0	0	0	

TIMES : SCC:5 : 0.00149893760681
TIMES : FUN:133 : 0.00149202346802
=================================
Finished an SCC (1)
=================================
Summary for function: 133
=======

SUMS (fk, lo, un, wr, re):	133	0	0	0	0	

SS Sum:
 -> 
$SSBOT
SIZES: 133 : 34
>>> PROGRESS 10/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #6
=================================
Summarizing function: mungeMax : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	13	0	1	1	2	

TIMES : FUN:13 : 0.00476813316345
TIMES : SCC:6 : 0.00477385520935
=================================
Finished an SCC (1)
=================================
Summary for function: 13
=======

SUMS (fk, lo, un, wr, re):	13	0	1	1	2	

SS Sum:
 -> 
Vval: 0
SIZES: 13 : 308
>>> PROGRESS 11/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #15
=================================
Summarizing function: getPtr : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 1	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	109	0	0	1	0	

TIMES : SCC:15 : 0.00169205665588
TIMES : FUN:109 : 0.00168609619141
=================================
Finished an SCC (1)
=================================
Summary for function: 109
=======

SUMS (fk, lo, un, wr, re):	109	0	0	1	0	

SS Sum:
 -> 
$SSBOT
SIZES: 109 : 92
>>> PROGRESS 12/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #7
=================================
Summarizing function: modAL : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	113	0	1	2	1	

TIMES : SCC:7 : 0.0012788772583
TIMES : FUN:113 : 0.00127291679382
=================================
Finished an SCC (1)
=================================
Summary for function: 113
=======

SUMS (fk, lo, un, wr, re):	113	0	1	2	1	

SS Sum:
 -> 
$SSBOT
SIZES: 113 : 157
>>> PROGRESS 13/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #30
=================================
Summarizing function: make : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 1	misses: 4

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	120	0	0	1	0	

TIMES : SCC:30 : 0.000229835510254
TIMES : FUN:120 : 0.000226020812988
=================================
Finished an SCC (1)
=================================
Summary for function: 120
=======

SUMS (fk, lo, un, wr, re):	120	0	0	1	0	

SS Sum:
 -> 
$SSBOT
SIZES: 120 : 92
>>> PROGRESS 14/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #8
=================================
Summarizing function: modU : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	128	0	0	1	0	

TIMES : FUN:128 : 0.000459909439087
TIMES : SCC:8 : 0.000463962554932
=================================
Finished an SCC (1)
=================================
Summary for function: 128
=======

SUMS (fk, lo, un, wr, re):	128	0	0	1	0	

SS Sum:
 -> 
$SSBOT
SIZES: 128 : 89
>>> PROGRESS 15/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #9
=================================
Summarizing function: accDListWithPtrA : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 1	misses: 1

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	59	0	0	0	1	

TIMES : SCC:9 : 0.00339794158936
TIMES : FUN:59 : 0.00339078903198
=================================
Finished an SCC (1)
=================================
Summary for function: 59
=======

SUMS (fk, lo, un, wr, re):	59	0	0	0	1	

SS Sum:
 -> 
Vval: 0
SIZES: 59 : 395
>>> PROGRESS 16/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #11
=================================
Summarizing function: t2_main : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	9	0	0	0	0	

TIMES : FUN:9 : 0.00387501716614
TIMES : SCC:11 : 0.00388216972351
=================================
Finished an SCC (1)
=================================
Summary for function: 9
=======

SUMS (fk, lo, un, wr, re):	9	0	0	0	0	

SS Sum:
 -> 
Vval: 0
SIZES: 9 : 34
>>> PROGRESS 17/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #12
=================================
Summarizing function: makeObjList : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 8	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	46	0	0	4	0	

TIMES : SCC:12 : 0.0028669834137
TIMES : FUN:46 : 0.00285983085632
=================================
Finished an SCC (1)
=================================
Summary for function: 46
=======

SUMS (fk, lo, un, wr, re):	46	0	0	4	0	

SS Sum:
 -> 
Extptr (15):
  lval = _a177_60315_threads_1
  lval = (*$NULL)(sum)

SIZES: 46 : 350
>>> PROGRESS 18/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #13
=================================
Summarizing function: makeRunRacey : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	28	0	0	0	0	

TIMES : SCC:13 : 0.000421047210693
TIMES : FUN:28 : 0.000415086746216
=================================
Finished an SCC (1)
=================================
Summary for function: 28
=======

SUMS (fk, lo, un, wr, re):	28	0	0	0	0	

SS Sum:
 -> 
$SSBOT
SIZES: 28 : 34
>>> PROGRESS 19/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #14
=================================
Summarizing function: makeRunThreads : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 1

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	25	0	0	0	0	

TIMES : SCC:14 : 0.000349998474121
TIMES : FUN:25 : 0.000344038009644
=================================
Finished an SCC (1)
=================================
Summary for function: 25
=======

SUMS (fk, lo, un, wr, re):	25	0	0	0	0	

SS Sum:
 -> 
$SSBOT
SIZES: 25 : 34
>>> PROGRESS 20/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #16
=================================
Summarizing function: loopWithGoto : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	40	0	1	1	3	

TIMES : SCC:16 : 0.000925064086914
TIMES : FUN:40 : 0.000917911529541
=================================
Finished an SCC (1)
=================================
Summary for function: 40
=======

SUMS (fk, lo, un, wr, re):	40	0	1	1	3	

SS Sum:
 -> 
Vval: 0
SIZES: 40 : 418
>>> PROGRESS 21/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #10
=================================
Summarizing function: main : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 1	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	75	0	1	13	4	

TIMES : FUN:75 : 0.00231885910034
TIMES : SCC:10 : 0.0023250579834
=================================
Finished an SCC (1)
=================================
Summary for function: 75
=======

SUMS (fk, lo, un, wr, re):	75	0	1	13	4	

SS Sum:
 -> 
Vval: 0
SIZES: 75 : 887
>>> PROGRESS 22/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #17
=================================
Summarizing function: raceyMunge : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 31	misses: 5

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	22	0	0	1	1	

TIMES : SCC:17 : 0.000245094299316
TIMES : FUN:22 : 0.000239849090576
=================================
Finished an SCC (1)
=================================
Summary for function: 22
=======

SUMS (fk, lo, un, wr, re):	22	0	0	1	1	

SS Sum:
 -> 
Vval: 0
SIZES: 22 : 199
>>> PROGRESS 23/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #18
=================================
Summarizing function: branch : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	124	0	0	6	2	

TIMES : FUN:124 : 0.00181794166565
TIMES : SCC:18 : 0.00182294845581
=================================
Finished an SCC (1)
=================================
Summary for function: 124
=======

SUMS (fk, lo, un, wr, re):	124	0	0	6	2	

SS Sum:
 -> 
$SSBOT
SIZES: 124 : 443
>>> PROGRESS 24/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #23
=================================
Summarizing function: getLock : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	53	0	0	0	1	

TIMES : SCC:23 : 0.00432395935059
TIMES : FUN:53 : 0.00431704521179
=================================
Finished an SCC (1)
=================================
Summary for function: 53
=======

SUMS (fk, lo, un, wr, re):	53	0	0	0	1	

SS Sum:
 -> 
$SSTOP
SIZES: 53 : 199
>>> PROGRESS 25/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #31
=================================
Summarizing function: getObj : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	51	0	0	0	1	

TIMES : SCC:31 : 0.000196933746338
TIMES : FUN:51 : 0.000190019607544
=================================
Finished an SCC (1)
=================================
Summary for function: 51
=======

SUMS (fk, lo, un, wr, re):	51	0	0	0	1	

SS Sum:
 -> 
$SSTOP
SIZES: 51 : 254
>>> PROGRESS 26/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #19
=================================
Summarizing function: raceyGetterUse : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 0

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	55	0	1	1	3	

TIMES : SCC:19 : 0.00142502784729
TIMES : FUN:55 : 0.00142002105713
=================================
Finished an SCC (1)
=================================
Summary for function: 55
=======

SUMS (fk, lo, un, wr, re):	55	0	1	1	3	

SS Sum:
 -> 
$SSBOT
SIZES: 55 : 375
>>> PROGRESS 27/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #27
=================================
Summarizing function: loop : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 2	misses: 4

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	35	0	1	1	3	

TIMES : SCC:27 : 0.000744819641113
TIMES : FUN:35 : 0.000739097595215
=================================
Finished an SCC (1)
=================================
Summary for function: 35
=======

SUMS (fk, lo, un, wr, re):	35	0	1	1	3	

SS Sum:
 -> 
$SSBOT
SIZES: 35 : 370
>>> PROGRESS 28/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #20
=================================
Summarizing function: loopAndRecurse : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 1	misses: 3

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	37	0	0	1	3	

Summarizing function: loopAndRecurse : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 3	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	37	0	1	1	4	

Summarizing function: loopAndRecurse : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 6	misses: 6

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	37	0	1	1	4	

TIMES : SCC:20 : 0.00112795829773
TIMES : FUN:37 : 0.00111508369446
=================================
Finished an SCC (1)
=================================
Summary for function: 37
=======

SUMS (fk, lo, un, wr, re):	37	0	1	1	4	

SS Sum:
 -> 
Vval: 0
SIZES: 37 : 434
>>> PROGRESS 29/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #21
=================================
Summarizing function: _spin_trylock : test_dir/lock.c
-----
doing symstate
TIMES : SCC:21 : 0.000201940536499
TIMES : FUN:2 : 0.000196933746338
=================================
Finished an SCC (1)
=================================
Summary for function: 2
=======

SUMS (fk, lo, un, wr, re):	2	1	0	0	0	

SS Sum:
 -> 
$SSTOP
SIZES: 2 : 136
>>> PROGRESS 30/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #22
=================================
Summarizing function: munge : test_dir/threads.c
-----
doing symstate
Prev ldiffCache hits: 8	misses: 5

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	19	0	1	1	2	

TIMES : SCC:22 : 0.00429797172546
TIMES : FUN:19 : 0.00429105758667
=================================
Finished an SCC (1)
=================================
Summary for function: 19
=======

SUMS (fk, lo, un, wr, re):	19	0	1	1	2	

SS Sum:
 -> 
Vval: 0
SIZES: 19 : 283
>>> PROGRESS 31/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #24
=================================
Summarizing function: unsafeThread : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 0	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	104	0	0	3	3	

TIMES : SCC:24 : 0.00385093688965
TIMES : FUN:104 : 0.00384402275085
=================================
Finished an SCC (1)
=================================
Summary for function: 104
=======

SUMS (fk, lo, un, wr, re):	104	0	0	3	3	

SS Sum:
 -> 
Vval: 0
SIZES: 104 : 314
>>> PROGRESS 32/33 SCCs DONE!

=================================
getting next SCC from server
Acquiring needed summaries
=================================
Starting an SCC (1) #32
=================================
Summarizing function: reachedByName : test_dir/threads2.c
-----
doing symstate
Prev ldiffCache hits: 5	misses: 2

doing lockset
doing guarded access
SUMS (fk, lo, un, wr, re):	136	0	0	0	0	

TIMES : FUN:136 : 0.000144004821777
TIMES : SCC:32 : 0.00015115737915
=================================
Finished an SCC (1)
=================================
Summary for function: 136
=======

SUMS (fk, lo, un, wr, re):	136	0	0	0	0	

SS Sum:
 -> 
$SSBOT
SIZES: 136 : 34
>>> PROGRESS 33/33 SCCs DONE!

=================================
getting next SCC from server
Bottomup analysis complete
-----



Beginning Thread Analysis:
-----
Expected # thread-creation site pairs: 10
checking a thread-creation pair
Prev ldiffCache hits: 0	misses: 0

doing symstate
Prev ldiffCache hits: 38	misses: 3

doing symstate
now checking thread roots: raceyGetterUse, raceyGetterUse
New race added to race reports
now checking thread roots: raceyGetterUse, raceyGetterUse
now checking thread roots: raceyGetterUse, loopWithGoto
now checking thread roots: raceyGetterUse, loopWithGoto
now checking thread roots: raceyGetterUse, lockWithGoto
now checking thread roots: raceyGetterUse, lockWithGoto
now checking thread roots: raceyGetterUse, loopAndRecurse
now checking thread roots: raceyGetterUse, loopAndRecurse
now checking thread roots: raceyGetterUse, globMunge
now checking thread roots: raceyGetterUse, munge
now checking thread roots: raceyGetterUse, raceyMunge
now checking thread roots: raceyGetterUse, raceyMunge
now checking thread roots: raceyGetterUse, raceyGetterUse
now checking thread roots: raceyGetterUse, raceyGetterUse
now checking thread roots: raceyGetterUse, loopWithGoto
now checking thread roots: raceyGetterUse, loopWithGoto
now checking thread roots: raceyGetterUse, lockWithGoto
now checking thread roots: raceyGetterUse, lockWithGoto
now checking thread roots: raceyGetterUse, loopAndRecurse
now checking thread roots: raceyGetterUse, loopAndRecurse
now checking thread roots: raceyGetterUse, globMunge
now checking thread roots: raceyGetterUse, munge
now checking thread roots: raceyGetterUse, raceyMunge
now checking thread roots: raceyGetterUse, raceyMunge
now checking thread roots: loopWithGoto, raceyGetterUse
now checking thread roots: loopWithGoto, raceyGetterUse
now checking thread roots: loopWithGoto, loopWithGoto
New race added to race reports
New race added to race reports
now checking thread roots: loopWithGoto, loopWithGoto
now checking thread roots: loopWithGoto, lockWithGoto
now checking thread roots: loopWithGoto, lockWithGoto
now checking thread roots: loopWithGoto, loopAndRecurse
New race added to race reports
New race added to race reports
now checking thread roots: loopWithGoto, loopAndRecurse
now checking thread roots: loopWithGoto, globMunge
now checking thread roots: loopWithGoto, munge
now checking thread roots: loopWithGoto, raceyMunge
now checking thread roots: loopWithGoto, raceyMunge
now checking thread roots: loopWithGoto, raceyGetterUse
now checking thread roots: loopWithGoto, raceyGetterUse
now checking thread roots: loopWithGoto, loopWithGoto
now checking thread roots: loopWithGoto, loopWithGoto
now checking thread roots: loopWithGoto, lockWithGoto
now checking thread roots: loopWithGoto, lockWithGoto
now checking thread roots: loopWithGoto, loopAndRecurse
now checking thread roots: loopWithGoto, loopAndRecurse
now checking thread roots: loopWithGoto, globMunge
now checking thread roots: loopWithGoto, munge
now checking thread roots: loopWithGoto, raceyMunge
now checking thread roots: loopWithGoto, raceyMunge
now checking thread roots: lockWithGoto, raceyGetterUse
now checking thread roots: lockWithGoto, raceyGetterUse
now checking thread roots: lockWithGoto, loopWithGoto
now checking thread roots: lockWithGoto, loopWithGoto
now checking thread roots: lockWithGoto, lockWithGoto
New race added to race reports
New race added to race reports
now checking thread roots: lockWithGoto, lockWithGoto
now checking thread roots: lockWithGoto, loopAndRecurse
now checking thread roots: lockWithGoto, loopAndRecurse
now checking thread roots: lockWithGoto, globMunge
now checking thread roots: lockWithGoto, munge
now checking thread roots: lockWithGoto, raceyMunge
now checking thread roots: lockWithGoto, raceyMunge
now checking thread roots: lockWithGoto, raceyGetterUse
now checking thread roots: lockWithGoto, raceyGetterUse
now checking thread roots: lockWithGoto, loopWithGoto
now checking thread roots: lockWithGoto, loopWithGoto
now checking thread roots: lockWithGoto, lockWithGoto
now checking thread roots: lockWithGoto, lockWithGoto
now checking thread roots: lockWithGoto, loopAndRecurse
now checking thread roots: lockWithGoto, loopAndRecurse
now checking thread roots: lockWithGoto, globMunge
now checking thread roots: lockWithGoto, munge
now checking thread roots: lockWithGoto, raceyMunge
now checking thread roots: lockWithGoto, raceyMunge
now checking thread roots: loopAndRecurse, raceyGetterUse
now checking thread roots: loopAndRecurse, raceyGetterUse
now checking thread roots: loopAndRecurse, loopWithGoto
now checking thread roots: loopAndRecurse, loopWithGoto
now checking thread roots: loopAndRecurse, lockWithGoto
now checking thread roots: loopAndRecurse, lockWithGoto
now checking thread roots: loopAndRecurse, loopAndRecurse
New race added to race reports
now checking thread roots: loopAndRecurse, loopAndRecurse
now checking thread roots: loopAndRecurse, globMunge
now checking thread roots: loopAndRecurse, munge
now checking thread roots: loopAndRecurse, raceyMunge
now checking thread roots: loopAndRecurse, raceyMunge
now checking thread roots: loopAndRecurse, raceyGetterUse
now checking thread roots: loopAndRecurse, raceyGetterUse
now checking thread roots: loopAndRecurse, loopWithGoto
now checking thread roots: loopAndRecurse, loopWithGoto
now checking thread roots: loopAndRecurse, lockWithGoto
now checking thread roots: loopAndRecurse, lockWithGoto
now checking thread roots: loopAndRecurse, loopAndRecurse
now checking thread roots: loopAndRecurse, loopAndRecurse
now checking thread roots: loopAndRecurse, globMunge
now checking thread roots: loopAndRecurse, munge
now checking thread roots: loopAndRecurse, raceyMunge
now checking thread roots: loopAndRecurse, raceyMunge
now checking thread roots: globMunge, raceyGetterUse
now checking thread roots: globMunge, raceyGetterUse
now checking thread roots: globMunge, loopWithGoto
now checking thread roots: globMunge, loopWithGoto
now checking thread roots: globMunge, lockWithGoto
now checking thread roots: globMunge, lockWithGoto
now checking thread roots: globMunge, loopAndRecurse
now checking thread roots: globMunge, loopAndRecurse
now checking thread roots: globMunge, globMunge
New race added to race reports
now checking thread roots: globMunge, munge
now checking thread roots: globMunge, raceyMunge
now checking thread roots: globMunge, raceyMunge
now checking thread roots: munge, raceyGetterUse
now checking thread roots: munge, raceyGetterUse
now checking thread roots: munge, loopWithGoto
now checking thread roots: munge, loopWithGoto
now checking thread roots: munge, lockWithGoto
now checking thread roots: munge, lockWithGoto
now checking thread roots: munge, loopAndRecurse
now checking thread roots: munge, loopAndRecurse
now checking thread roots: munge, globMunge
now checking thread roots: munge, munge
New race added to race reports
now checking thread roots: munge, raceyMunge
now checking thread roots: munge, raceyMunge
now checking thread roots: raceyMunge, raceyGetterUse
now checking thread roots: raceyMunge, raceyGetterUse
now checking thread roots: raceyMunge, loopWithGoto
now checking thread roots: raceyMunge, loopWithGoto
now checking thread roots: raceyMunge, lockWithGoto
now checking thread roots: raceyMunge, lockWithGoto
now checking thread roots: raceyMunge, loopAndRecurse
now checking thread roots: raceyMunge, loopAndRecurse
now checking thread roots: raceyMunge, globMunge
now checking thread roots: raceyMunge, munge
now checking thread roots: raceyMunge, raceyMunge
New race added to race reports
now checking thread roots: raceyMunge, raceyMunge
now checking thread roots: raceyMunge, raceyGetterUse
now checking thread roots: raceyMunge, raceyGetterUse
now checking thread roots: raceyMunge, loopWithGoto
now checking thread roots: raceyMunge, loopWithGoto
now checking thread roots: raceyMunge, lockWithGoto
now checking thread roots: raceyMunge, lockWithGoto
now checking thread roots: raceyMunge, loopAndRecurse
now checking thread roots: raceyMunge, loopAndRecurse
now checking thread roots: raceyMunge, globMunge
now checking thread roots: raceyMunge, munge
now checking thread roots: raceyMunge, raceyMunge
now checking thread roots: raceyMunge, raceyMunge
done with pair, sending notification
checking a thread-creation pair
Prev ldiffCache hits: 38	misses: 3

doing symstate
Prev ldiffCache hits: 38	misses: 3

doing symstate
now checking thread roots: raceyGetterUse, raceyMunge
now checking thread roots: raceyGetterUse, raceyMunge
now checking thread roots: loopWithGoto, raceyMunge
now checking thread roots: loopWithGoto, raceyMunge
now checking thread roots: lockWithGoto, raceyMunge
now checking thread roots: lockWithGoto, raceyMunge
now checking thread roots: loopAndRecurse, raceyMunge
now checking thread roots: loopAndRecurse, raceyMunge
now checking thread roots: globMunge, raceyMunge
now checking thread roots: munge, raceyMunge
now checking thread roots: raceyMunge, raceyMunge
now checking thread roots: raceyMunge, raceyMunge
done with pair, sending notification
checking a thread-creation pair
Prev ldiffCache hits: 1	misses: 1

doing symstate
Prev ldiffCache hits: 38	misses: 3

doing symstate
now checking thread roots: raceyGetterUse, mungeMax
now checking thread roots: raceyGetterUse, munge
now checking thread roots: raceyGetterUse, mungeMax
now checking thread roots: raceyGetterUse, munge
now checking thread roots: loopWithGoto, mungeMax
now checking thread roots: loopWithGoto, munge
now checking thread roots: loopWithGoto, mungeMax
now checking thread roots: loopWithGoto, munge
now checking thread roots: lockWithGoto, mungeMax
now checking thread roots: lockWithGoto, munge
now checking thread roots: lockWithGoto, mungeMax
now checking thread roots: lockWithGoto, munge
now checking thread roots: loopAndRecurse, mungeMax
now checking thread roots: loopAndRecurse, munge
now checking thread roots: loopAndRecurse, mungeMax
now checking thread roots: loopAndRecurse, munge
now checking thread roots: globMunge, mungeMax
now checking thread roots: globMunge, munge
now checking thread roots: munge, mungeMax
now checking thread roots: munge, munge
now checking thread roots: raceyMunge, mungeMax
now checking thread roots: raceyMunge, munge
now checking thread roots: raceyMunge, mungeMax
now checking thread roots: raceyMunge, munge
done with pair, sending notification
checking a thread-creation pair
Prev ldiffCache hits: 4	misses: 2

doing symstate
Prev ldiffCache hits: 38	misses: 3

doing symstate
now checking thread roots: raceyGetterUse, reachedByName
now checking thread roots: raceyGetterUse, reachedByFP
now checking thread roots: raceyGetterUse, modU
now checking thread roots: raceyGetterUse, modAL2
now checking thread roots: raceyGetterUse, modAL
now checking thread roots: raceyGetterUse, branch
now checking thread roots: raceyGetterUse, unsafeThread
now checking thread roots: raceyGetterUse, unsafeThread
now checking thread roots: raceyGetterUse, safeThread
now checking thread roots: raceyGetterUse, safeThread
now checking thread roots: raceyGetterUse, reachedByName
now checking thread roots: raceyGetterUse, reachedByFP
now checking thread roots: raceyGetterUse, modU
now checking thread roots: raceyGetterUse, modAL2
now checking thread roots: raceyGetterUse, modAL
now checking thread roots: raceyGetterUse, branch
now checking thread roots: raceyGetterUse, unsafeThread
now checking thread roots: raceyGetterUse, unsafeThread
now checking thread roots: raceyGetterUse, safeThread
now checking thread roots: raceyGetterUse, safeThread
now checking thread roots: loopWithGoto, reachedByName
now checking thread roots: loopWithGoto, reachedByFP
now checking thread roots: loopWithGoto, modU
now checking thread roots: loopWithGoto, modAL2
now checking thread roots: loopWithGoto, modAL
now checking thread roots: loopWithGoto, branch
now checking thread roots: loopWithGoto, unsafeThread
now checking thread roots: loopWithGoto, unsafeThread
now checking thread roots: loopWithGoto, safeThread
now checking thread roots: loopWithGoto, safeThread
now checking thread roots: loopWithGoto, reachedByName
now checking thread roots: loopWithGoto, reachedByFP
now checking thread roots: loopWithGoto, modU
now checking thread roots: loopWithGoto, modAL2
now checking thread roots: loopWithGoto, modAL
now checking thread roots: loopWithGoto, branch
now checking thread roots: loopWithGoto, unsafeThread
now checking thread roots: loopWithGoto, unsafeThread
now checking thread roots: loopWithGoto, safeThread
now checking thread roots: loopWithGoto, safeThread
now checking thread roots: lockWithGoto, reachedByName
now checking thread roots: lockWithGoto, reachedByFP
now checking thread roots: lockWithGoto, modU
now checking thread roots: lockWithGoto, modAL2
now checking thread roots: lockWithGoto, modAL
now checking thread roots: lockWithGoto, branch
now checking thread roots: lockWithGoto, unsafeThread
now checking thread roots: lockWithGoto, unsafeThread
now checking thread roots: lockWithGoto, safeThread
now checking thread roots: lockWithGoto, safeThread
now checking thread roots: lockWithGoto, reachedByName
now checking thread roots: lockWithGoto, reachedByFP
now checking thread roots: lockWithGoto, modU
now checking thread roots: lockWithGoto, modAL2
now checking thread roots: lockWithGoto, modAL
now checking thread roots: lockWithGoto, branch
now checking thread roots: lockWithGoto, unsafeThread
now checking thread roots: lockWithGoto, unsafeThread
now checking thread roots: lockWithGoto, safeThread
now checking thread roots: lockWithGoto, safeThread
now checking thread roots: loopAndRecurse, reachedByName
now checking thread roots: loopAndRecurse, reachedByFP
now checking thread roots: loopAndRecurse, modU
now checking thread roots: loopAndRecurse, modAL2
now checking thread roots: loopAndRecurse, modAL
now checking thread roots: loopAndRecurse, branch
now checking thread roots: loopAndRecurse, unsafeThread
now checking thread roots: loopAndRecurse, unsafeThread
now checking thread roots: loopAndRecurse, safeThread
now checking thread roots: loopAndRecurse, safeThread
now checking thread roots: loopAndRecurse, reachedByName
now checking thread roots: loopAndRecurse, reachedByFP
now checking thread roots: loopAndRecurse, modU
now checking thread roots: loopAndRecurse, modAL2
now checking thread roots: loopAndRecurse, modAL
now checking thread roots: loopAndRecurse, branch
now checking thread roots: loopAndRecurse, unsafeThread
now checking thread roots: loopAndRecurse, unsafeThread
now checking thread roots: loopAndRecurse, safeThread
now checking thread roots: loopAndRecurse, safeThread
now checking thread roots: globMunge, reachedByName
now checking thread roots: globMunge, reachedByFP
now checking thread roots: globMunge, modU
now checking thread roots: globMunge, modAL2
now checking thread roots: globMunge, modAL
now checking thread roots: globMunge, branch
now checking thread roots: globMunge, unsafeThread
now checking thread roots: globMunge, unsafeThread
now checking thread roots: globMunge, safeThread
now checking thread roots: globMunge, safeThread
now checking thread roots: munge, reachedByName
now checking thread roots: munge, reachedByFP
now checking thread roots: munge, modU
now checking thread roots: munge, modAL2
now checking thread roots: munge, modAL
now checking thread roots: munge, branch
now checking thread roots: munge, unsafeThread
now checking thread roots: munge, unsafeThread
now checking thread roots: munge, safeThread
now checking thread roots: munge, safeThread
now checking thread roots: raceyMunge, reachedByName
now checking thread roots: raceyMunge, reachedByFP
now checking thread roots: raceyMunge, modU
now checking thread roots: raceyMunge, modAL2
now checking thread roots: raceyMunge, modAL
now checking thread roots: raceyMunge, branch
now checking thread roots: raceyMunge, unsafeThread
now checking thread roots: raceyMunge, unsafeThread
now checking thread roots: raceyMunge, safeThread
now checking thread roots: raceyMunge, safeThread
now checking thread roots: raceyMunge, reachedByName
now checking thread roots: raceyMunge, reachedByFP
now checking thread roots: raceyMunge, modU
now checking thread roots: raceyMunge, modAL2
now checking thread roots: raceyMunge, modAL
now checking thread roots: raceyMunge, branch
now checking thread roots: raceyMunge, unsafeThread
now checking thread roots: raceyMunge, unsafeThread
now checking thread roots: raceyMunge, safeThread
now checking thread roots: raceyMunge, safeThread
done with pair, sending notification
checking a thread-creation pair
Prev ldiffCache hits: 33	misses: 5

doing symstate
Prev ldiffCache hits: 1	misses: 1

doing symstate
now checking thread roots: raceyMunge, raceyMunge
done with pair, sending notification
checking a thread-creation pair
Prev ldiffCache hits: 1	misses: 1

doing symstate
Prev ldiffCache hits: 1	misses: 1

doing symstate
now checking thread roots: raceyMunge, mungeMax
now checking thread roots: raceyMunge, munge
done with pair, sending notification
checking a thread-creation pair
Prev ldiffCache hits: 4	misses: 2

doing symstate
Prev ldiffCache hits: 1	misses: 1

doing symstate
now checking thread roots: raceyMunge, reachedByName
now checking thread roots: raceyMunge, reachedByFP
now checking thread roots: raceyMunge, modU
now checking thread roots: raceyMunge, modAL2
now checking thread roots: raceyMunge, modAL
now checking thread roots: raceyMunge, branch
now checking thread roots: raceyMunge, unsafeThread
now checking thread roots: raceyMunge, unsafeThread
now checking thread roots: raceyMunge, safeThread
now checking thread roots: raceyMunge, safeThread
done with pair, sending notification
checking a thread-creation pair
Prev ldiffCache hits: 33	misses: 5

doing symstate
Prev ldiffCache hits: 4	misses: 2

doing symstate
now checking thread roots: mungeMax, mungeMax
New race added to race reports
New race added to race reports
now checking thread roots: mungeMax, munge
New race added to race reports
New race added to race reports
now checking thread roots: munge, mungeMax
now checking thread roots: munge, munge
done with pair, sending notification
checking a thread-creation pair
Prev ldiffCache hits: 4	misses: 2

doing symstate
Prev ldiffCache hits: 4	misses: 2

doing symstate
now checking thread roots: mungeMax, reachedByName
now checking thread roots: mungeMax, reachedByFP
now checking thread roots: mungeMax, modU
now checking thread roots: mungeMax, modAL2
now checking thread roots: mungeMax, modAL
now checking thread roots: mungeMax, branch
now checking thread roots: mungeMax, unsafeThread
now checking thread roots: mungeMax, unsafeThread
now checking thread roots: mungeMax, safeThread
now checking thread roots: mungeMax, safeThread
now checking thread roots: munge, reachedByName
now checking thread roots: munge, reachedByFP
now checking thread roots: munge, modU
now checking thread roots: munge, modAL2
now checking thread roots: munge, modAL
now checking thread roots: munge, branch
now checking thread roots: munge, unsafeThread
now checking thread roots: munge, unsafeThread
now checking thread roots: munge, safeThread
now checking thread roots: munge, safeThread
done with pair, sending notification
checking a thread-creation pair
Prev ldiffCache hits: 33	misses: 5

doing symstate
Prev ldiffCache hits: 33	misses: 5

doing symstate
now checking thread roots: reachedByName, reachedByName
now checking thread roots: reachedByName, reachedByFP
now checking thread roots: reachedByName, modU
now checking thread roots: reachedByName, modAL2
now checking thread roots: reachedByName, modAL
now checking thread roots: reachedByName, branch
now checking thread roots: reachedByName, unsafeThread
now checking thread roots: reachedByName, unsafeThread
now checking thread roots: reachedByName, safeThread
now checking thread roots: reachedByName, safeThread
now checking thread roots: reachedByFP, reachedByName
now checking thread roots: reachedByFP, reachedByFP
now checking thread roots: reachedByFP, modU
now checking thread roots: reachedByFP, modAL2
now checking thread roots: reachedByFP, modAL
now checking thread roots: reachedByFP, branch
now checking thread roots: reachedByFP, unsafeThread
now checking thread roots: reachedByFP, unsafeThread
now checking thread roots: reachedByFP, safeThread
now checking thread roots: reachedByFP, safeThread
now checking thread roots: modU, reachedByName
now checking thread roots: modU, reachedByFP
now checking thread roots: modU, modU
New race added to race reports
now checking thread roots: modU, modAL2
now checking thread roots: modU, modAL
now checking thread roots: modU, branch
now checking thread roots: modU, unsafeThread
now checking thread roots: modU, unsafeThread
now checking thread roots: modU, safeThread
now checking thread roots: modU, safeThread
now checking thread roots: modAL2, reachedByName
now checking thread roots: modAL2, reachedByFP
now checking thread roots: modAL2, modU
now checking thread roots: modAL2, modAL2
now checking thread roots: modAL2, modAL
now checking thread roots: modAL2, branch
now checking thread roots: modAL2, unsafeThread
now checking thread roots: modAL2, unsafeThread
now checking thread roots: modAL2, safeThread
now checking thread roots: modAL2, safeThread
now checking thread roots: modAL, reachedByName
now checking thread roots: modAL, reachedByFP
now checking thread roots: modAL, modU
now checking thread roots: modAL, modAL2
now checking thread roots: modAL, modAL
now checking thread roots: modAL, branch
now checking thread roots: modAL, unsafeThread
now checking thread roots: modAL, unsafeThread
now checking thread roots: modAL, safeThread
now checking thread roots: modAL, safeThread
now checking thread roots: branch, reachedByName
now checking thread roots: branch, reachedByFP
now checking thread roots: branch, modU
now checking thread roots: branch, modAL2
now checking thread roots: branch, modAL
now checking thread roots: branch, branch
New race added to race reports
New race added to race reports
New race added to race reports
New race added to race reports
New race added to race reports
now checking thread roots: branch, unsafeThread
now checking thread roots: branch, unsafeThread
now checking thread roots: branch, safeThread
now checking thread roots: branch, safeThread
now checking thread roots: unsafeThread, reachedByName
now checking thread roots: unsafeThread, reachedByFP
now checking thread roots: unsafeThread, modU
now checking thread roots: unsafeThread, modAL2
now checking thread roots: unsafeThread, modAL
now checking thread roots: unsafeThread, branch
now checking thread roots: unsafeThread, unsafeThread
New race added to race reports
now checking thread roots: unsafeThread, unsafeThread
now checking thread roots: unsafeThread, safeThread
now checking thread roots: unsafeThread, safeThread
now checking thread roots: unsafeThread, reachedByName
now checking thread roots: unsafeThread, reachedByFP
now checking thread roots: unsafeThread, modU
now checking thread roots: unsafeThread, modAL2
now checking thread roots: unsafeThread, modAL
now checking thread roots: unsafeThread, branch
now checking thread roots: unsafeThread, unsafeThread
now checking thread roots: unsafeThread, unsafeThread
now checking thread roots: unsafeThread, safeThread
now checking thread roots: unsafeThread, safeThread
now checking thread roots: safeThread, reachedByName
now checking thread roots: safeThread, reachedByFP
now checking thread roots: safeThread, modU
now checking thread roots: safeThread, modAL2
now checking thread roots: safeThread, modAL
now checking thread roots: safeThread, branch
now checking thread roots: safeThread, unsafeThread
now checking thread roots: safeThread, unsafeThread
now checking thread roots: safeThread, safeThread
now checking thread roots: safeThread, safeThread
now checking thread roots: safeThread, reachedByName
now checking thread roots: safeThread, reachedByFP
now checking thread roots: safeThread, modU
now checking thread roots: safeThread, modAL2
now checking thread roots: safeThread, modAL
now checking thread roots: safeThread, branch
now checking thread roots: safeThread, unsafeThread
now checking thread roots: safeThread, unsafeThread
now checking thread roots: safeThread, safeThread
now checking thread roots: safeThread, safeThread
done with pair, sending notification
completed all thread pairs
****
Possible race between access to:
_a264_61637_threads_1.x @ test_dir/threads.c:251 and
_a264_61637_threads_1.x @ test_dir/threads.c:251
	Cluster ID: 6
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:55] and
	[test_dir/threads.c:50, test_dir/threads.c:55]

	Confidence: Syntactic

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:310 62736 w/ func: lockWithGoto
	Th. 2 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
	Th. 2 spawned: test_dir/threads.c:310 62736 w/ func: lockWithGoto
(1)
	Th. 1 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
	Th. 2 spawned: test_dir/threads.c:310 62736 w/ func: lockWithGoto
(2)
	Th. 1 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
	Th. 2 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
(3)
	Th. 1 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
	Th. 2 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
****
Possible race between access to:
_a264_61637_threads_1.x @ test_dir/threads.c:251 and
_a264_61637_threads_1.x @ test_dir/threads.c:251
	Cluster ID: 5
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:55] and
	[test_dir/threads.c:55]

	Confidence: Syntactic

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:310 62736 w/ func: lockWithGoto
	Th. 2 spawned: test_dir/threads.c:310 62736 w/ func: lockWithGoto

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads.c:310 62736 w/ func: lockWithGoto
	Th. 2 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
(1)
	Th. 1 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
	Th. 2 spawned: test_dir/threads.c:310 62736 w/ func: lockWithGoto
(2)
	Th. 1 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
	Th. 2 spawned: test_dir/threads.c:311 62814 w/ func: lockWithGoto
****
Possible race between access to:
datlock->x @ test_dir/threads.c:89 and
datlock->x @ test_dir/threads.c:89
	Cluster ID: 14
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:69] and
	[test_dir/threads.c:31, test_dir/threads.c:36]

	Confidence: Syntactic

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:93 59057 w/ func: munge
	Th. 2 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax
	Th. 2 spawned: test_dir/threads.c:93 59057 w/ func: munge
****
Possible race between access to:
datlock->x @ test_dir/threads.c:89 and
datlock->x @ test_dir/threads.c:89
	Cluster ID: 12
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:31, test_dir/threads.c:36] and
	[test_dir/threads.c:36]

	Confidence: Syntactic

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax
	Th. 2 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax
	Th. 2 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax
****
Possible race between access to:
datlock->x @ test_dir/threads.c:89 and
datlock->x @ test_dir/threads.c:89
	Cluster ID: 11
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:36] and
	[test_dir/threads.c:36]

	Confidence: Syntactic

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax
	Th. 2 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax

Different possible paths & LS (first 4):

****
Possible race between access to:
datlock->x @ test_dir/threads.c:89 and
datlock->x @ test_dir/threads.c:89
	Cluster ID: 13
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:69] and
	[test_dir/threads.c:36]

	Confidence: Syntactic

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:93 59057 w/ func: munge
	Th. 2 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads.c:94 59121 w/ func: mungeMax
	Th. 2 spawned: test_dir/threads.c:93 59057 w/ func: munge
****
Possible race between access to:
datlock->x @ test_dir/threads.c:89 and
datlock->x @ test_dir/threads.c:89
	Cluster ID: 9
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:69] and
	[test_dir/threads.c:69]

	Confidence: Syntactic

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:93 59057 w/ func: munge
	Th. 2 spawned: test_dir/threads.c:93 59057 w/ func: munge

Different possible paths & LS (first 4):

(0)
	lval 1: _a263_61586_threads_1.x
	lval 2: _a263_61586_threads_1.x
	Th. 1 spawned: test_dir/threads.c:294 62381 w/ func: munge
	Th. 2 spawned: test_dir/threads.c:294 62381 w/ func: munge
****
Possible race between access to:
_a108_59279_threads2_1.b @ test_dir/threads2.c:100 and
_a108_59279_threads2_1.b @ test_dir/threads2.c:100
	Cluster ID: 17
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads2.c:111] and
	[test_dir/threads2.c:111]

	Confidence: Syntactic

LS for 1st access:
L+ = empty;
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads2.c:167 60120 w/ func: branch
	Th. 2 spawned: test_dir/threads2.c:167 60120 w/ func: branch

Different possible paths & LS (first 4):

****
Possible race between access to:
_a156_59781_threads2_1.a @ test_dir/threads2.c:148 and
_a156_59781_threads2_1.a @ test_dir/threads2.c:148
	Cluster ID: 21
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads2.c:36] and
	[test_dir/threads2.c:36]

	Confidence: Syntactic

LS for 1st access:
L+ = empty;
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads2.c:164 59987 w/ func: unsafeThread
	Th. 2 spawned: test_dir/threads2.c:164 59987 w/ func: unsafeThread

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads2.c:164 59987 w/ func: unsafeThread
	Th. 2 spawned: test_dir/threads2.c:165 60053 w/ func: unsafeThread
(1)
	Th. 1 spawned: test_dir/threads2.c:165 60053 w/ func: unsafeThread
	Th. 2 spawned: test_dir/threads2.c:164 59987 w/ func: unsafeThread
(2)
	Th. 1 spawned: test_dir/threads2.c:165 60053 w/ func: unsafeThread
	Th. 2 spawned: test_dir/threads2.c:165 60053 w/ func: unsafeThread
****
Possible race between access to:
_a157_59816_threads2_1.a @ test_dir/threads2.c:148 and
_a157_59816_threads2_1.a @ test_dir/threads2.c:148
	Cluster ID: 20
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads2.c:105, test_dir/threads2.c:116] and
	[test_dir/threads2.c:116]

	Confidence: Syntactic

LS for 1st access:
L+ = empty;
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads2.c:167 60120 w/ func: branch
	Th. 2 spawned: test_dir/threads2.c:167 60120 w/ func: branch

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads2.c:167 60120 w/ func: branch
	Th. 2 spawned: test_dir/threads2.c:167 60120 w/ func: branch
****
Possible race between access to:
_a157_59816_threads2_1.a @ test_dir/threads2.c:148 and
_a157_59816_threads2_1.a @ test_dir/threads2.c:148
	Cluster ID: 16
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads2.c:116] and
	[test_dir/threads2.c:116]

	Confidence: Syntactic

LS for 1st access:
L+ = empty;
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads2.c:167 60120 w/ func: branch
	Th. 2 spawned: test_dir/threads2.c:167 60120 w/ func: branch

Different possible paths & LS (first 4):

(0)
	lval 1: _a108_59279_threads2_1.a
	lval 2: _a108_59279_threads2_1.a
	Th. 1 spawned: test_dir/threads2.c:167 60120 w/ func: branch
	Th. 2 spawned: test_dir/threads2.c:167 60120 w/ func: branch
****
Possible race between access to:
_a157_59816_threads2_1.b @ test_dir/threads2.c:148 and
_a157_59816_threads2_1.b @ test_dir/threads2.c:148
	Cluster ID: 19
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads2.c:106] and
	[test_dir/threads2.c:106]

	Confidence: Syntactic

LS for 1st access:
L+ = empty;
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads2.c:167 60120 w/ func: branch
	Th. 2 spawned: test_dir/threads2.c:167 60120 w/ func: branch

Different possible paths & LS (first 4):

****
Possible race between access to:
_a157_59816_threads2_1.c @ test_dir/threads2.c:148 and
_a157_59816_threads2_1.c @ test_dir/threads2.c:148
	Cluster ID: 18
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads2.c:117] and
	[test_dir/threads2.c:117]

	Confidence: Syntactic

LS for 1st access:
L+ = empty;
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads2.c:167 60120 w/ func: branch
	Th. 2 spawned: test_dir/threads2.c:167 60120 w/ func: branch

Different possible paths & LS (first 4):

(0)
	lval 1: _a108_59279_threads2_1.c
	lval 2: _a108_59279_threads2_1.c
	Th. 1 spawned: test_dir/threads2.c:167 60120 w/ func: branch
	Th. 2 spawned: test_dir/threads2.c:167 60120 w/ func: branch
****
Possible race between access to:
dlracey->x @ test_dir/threads.c:98 and
dlracey->x @ test_dir/threads.c:98
	Cluster ID: 10
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:82] and
	[test_dir/threads.c:82]

	Confidence: Syntactic

LS for 1st access:
L+ = empty;
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:102 59248 w/ func: raceyMunge
	Th. 2 spawned: test_dir/threads.c:102 59248 w/ func: raceyMunge

Different possible paths & LS (first 4):

(0)
	lval 1: _a260_61433_threads_1.x
	lval 2: _a260_61433_threads_1.x
	Th. 1 spawned: test_dir/threads.c:280 62125 w/ func: raceyMunge
	Th. 2 spawned: test_dir/threads.c:280 62125 w/ func: raceyMunge
(1)
	lval 1: _a262_61535_threads_1.x
	lval 2: _a262_61535_threads_1.x
	Th. 1 spawned: test_dir/threads.c:288 62274 w/ func: raceyMunge
	Th. 2 spawned: test_dir/threads.c:288 62274 w/ func: raceyMunge
****
Possible race between access to:
[REP: 46].x and
[REP: 46].x
	Cluster ID: 0
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:209] and
	[test_dir/threads.c:209]

	Confidence: used PTA nodes lblSet(0, 0)

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:322 63091 w/ func: raceyGetterUse
	Th. 2 spawned: test_dir/threads.c:322 63091 w/ func: raceyGetterUse

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads.c:322 63091 w/ func: raceyGetterUse
	Th. 2 spawned: test_dir/threads.c:323 63162 w/ func: raceyGetterUse
(1)
	Th. 1 spawned: test_dir/threads.c:323 63162 w/ func: raceyGetterUse
	Th. 2 spawned: test_dir/threads.c:322 63091 w/ func: raceyGetterUse
(2)
	Th. 1 spawned: test_dir/threads.c:323 63162 w/ func: raceyGetterUse
	Th. 2 spawned: test_dir/threads.c:323 63162 w/ func: raceyGetterUse
****
Possible race between access to:
[REP: 25] and
[REP: 25]
	Cluster ID: 15
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads2.c:129] and
	[test_dir/threads2.c:129]

	Confidence: used PTA nodes lblSet(1, 1)

LS for 1st access:
L+ = empty;
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads2.c:171 60300 w/ func: modU
	Th. 2 spawned: test_dir/threads2.c:171 60300 w/ func: modU

Different possible paths & LS (first 4):

****
Possible race between access to:
[REP: 42].x and
[REP: 42].x
	Cluster ID: 8
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:111] and
	[test_dir/threads.c:111]

	Confidence: used PTA nodes lblSet(1, 1)

LS for 1st access:
L+ = empty;
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:295 62452 w/ func: globMunge
	Th. 2 spawned: test_dir/threads.c:295 62452 w/ func: globMunge

Different possible paths & LS (first 4):

****
Possible race between access to:
[REP: 30].x and
[REP: 30].x
	Cluster ID: 7
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:121] and
	[test_dir/threads.c:121]

	Confidence: used PTA nodes lblSet(5, 5)

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:305 62591 w/ func: loopAndRecurse
	Th. 2 spawned: test_dir/threads.c:305 62591 w/ func: loopAndRecurse

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads.c:305 62591 w/ func: loopAndRecurse
	Th. 2 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
(1)
	Th. 1 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
	Th. 2 spawned: test_dir/threads.c:305 62591 w/ func: loopAndRecurse
(2)
	Th. 1 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
	Th. 2 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
****
Possible race between access to:
[REP: 30].x and
[REP: 30].x
	Cluster ID: 4
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:121] and
	[test_dir/threads.c:150, test_dir/threads.c:156, test_dir/threads.c:161]

	Confidence: used PTA nodes lblSet(5, 5)

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
	Th. 2 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto

Different possible paths & LS (first 4):

(0)
LS for 1st access:
L+ = empty;
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	Th. 1 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:305 62591 w/ func: loopAndRecurse
(1)
LS for 1st access:
L+ = empty;
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	Th. 1 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
(2)
LS for 1st access:
L+ = empty;
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:305 62591 w/ func: loopAndRecurse
(3)
LS for 1st access:
L+ = empty;
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
****
Possible race between access to:
[REP: 30].x and
[REP: 30].x
	Cluster ID: 3
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:121] and
	[test_dir/threads.c:161]

	Confidence: used PTA nodes lblSet(5, 5)

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
	Th. 2 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:305 62591 w/ func: loopAndRecurse
(1)
	Th. 1 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
(2)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:305 62591 w/ func: loopAndRecurse
(3)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:306 62662 w/ func: loopAndRecurse
****
Possible race between access to:
[REP: 30].x and
[REP: 30].x
	Cluster ID: 2
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:161] and
	[test_dir/threads.c:150, test_dir/threads.c:156, test_dir/threads.c:161]

	Confidence: used PTA nodes lblSet(5, 5)

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = empty;
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto

Different possible paths & LS (first 4):

(0)
LS for 1st access:
L+ = empty;
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
(1)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
(2)
LS for 1st access:
L+ = empty;
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
(3)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
****
Possible race between access to:
[REP: 30].x and
[REP: 30].x
	Cluster ID: 1
	Escapes? true / true 
	Accessed at locs:
	[test_dir/threads.c:161] and
	[test_dir/threads.c:161]

	Confidence: used PTA nodes lblSet(5, 5)

LS for 1st access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
LS for 2nd access:
L+ = {[REP: 30]#g} (1)
	(rep. lock)
	made empty at: :-1
	Th. 1 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto

Different possible paths & LS (first 4):

(0)
	Th. 1 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
(1)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:315 62921 w/ func: loopWithGoto
(2)
	Th. 1 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto
	Th. 2 spawned: test_dir/threads.c:316 62990 w/ func: loopWithGoto


$$$$$$
Total Warnings: 22


Printing Alias assumptions used by warnings
-----
nc	0	[REP: 46].x#g/[REP: 46].x#g	0	0
nc	15	[REP: 25]#g/[REP: 25]#g	1	1
nc	8	[REP: 42].x#g/[REP: 42].x#g	1	1
nc	7	[REP: 30].x#g/[REP: 30].x#g	5	5
nc	4	[REP: 30].x#g/[REP: 30].x#g	5	5
nc	3	[REP: 30].x#g/[REP: 30].x#g	5	5
nc	2	[REP: 30].x#g/[REP: 30].x#g	5	5
nc	1	[REP: 30].x#g/[REP: 30].x#g	5	5
writeState: Not needed for CIL PTA
writeState: Not needed for Steens PTA
Golden lvals hash stats (len, ents, sum/min/median/max bucket)
	173	66	423	0	3	9	
Golden lvals hash stats (len, ents, sum/min/median/max bucket)
	173	0	0	0	0	0	
Golden types hash stats (len, ents, sum/min/median/max bucket)
	173	28	81	0	0	3	
Golden compInfos hash stats (len, ents, sum/min/median/max bucket)
	173	0	0	0	0	0	
Elapsed time (secs): 0.180011
Top heap size (words): 430080
Current heap size (words): 430080
Lifetime allocated bytes: 24652832.
Collections -- minor: 19 major: 6 compactions: 0
return value is 0
ran 1 times
cleared status file: /tmp/temp.y2MGrS
Sun Aug 10 21:12:38 PDT 2008
